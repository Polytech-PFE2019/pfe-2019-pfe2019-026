/*
 * generated by Xtext 2.17.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import org.xtext.example.mydsl.myDsl.Contract
import org.xtext.example.mydsl.myDsl.Recipient
import org.xtext.example.mydsl.myDsl.Client
import org.xtext.example.mydsl.myDsl.Payment

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
 
class MyDslGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val contract = (resource.allContents.toIterable.filter(Contract)).get(0);
		fsa.generateFile(
			contract.contract + ".sol",
			contract.compile
		)
	}
		
	def compile(Contract c) '''
		pragma solidity >=0.4.21 <0.6.0;
		
		contract «c.contract» {
			«c.recipient.compile»
			
			«c.client.compile»

			bool public active = true;
			bool public isLate = false;

			«c.payment.compile»

			string public pdfHash;

			uint public dueDate = now + 30 seconds;
			uint public lastDate = dueDate + 15 days;
			
			constructor(String _pdfHash) public {
				pdfHash = _pdfHash;
			}
			
			modifier isActive {
				require(active);
				_;
			}
		
			function late() public {
				require(now > dueDate && !isLate);
		    	price += 1;
		    	isLate = true;
			}
		
			function verify() public returns(uint)  {
				late();
				return price;
			}
		};
    '''
    
	def compile(Recipient r) '''
		address public recipient = msg.sender;
	'''
	
	def compile (Client c) '''
		address public client = 0x33c6711d314f5bbCAa09cf49CF0c734D038A642B;
	'''
	
	def compile (Payment p) '''
		uint public price = «p.price»;
	'''

}
