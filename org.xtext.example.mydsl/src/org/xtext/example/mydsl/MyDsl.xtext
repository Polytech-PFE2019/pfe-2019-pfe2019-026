// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://LSC/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Contrat returns Contrat:
	'Contrat' nom=EString
		'entete' entete=Entete
		'clausesection' clausesection+=ClauseSection (clausesection+=ClauseSection)* 
	;


Expression returns Expression:
	ActiveDesactive | DateChange | NumChange;



Entete returns Entete:
	'Entete'
		'prix' prix=EFloat
		'date_debut' date_debut=EString
		('date_fin' date_fin=EString)?
		'objet' objet=EString
		'partie' partie+=Partie ( partie+=Partie)* 
	;

ClauseSection returns ClauseSection:
	'Section' nom=EString
		'clause' clause+=Clause ( clause+=Clause)*  
	;

EString returns ecore::EString:
	STRING | ID;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT;

Partie returns Partie:
	'Partie' nom=EString
		'adresse' adresse=EString
		'role' role=EString
	;

Clause returns Clause:
	'Clause' nom=EString
		'texte' texte=EString
		('execution' execution=Execution)?
		('variable' variable+=Variable (variable+=Variable)*)?
	;

Execution returns Execution:
	'Execution'
		droit+=droit ((operateurLogique='et' droit+=droit)+|(operateurLogique='ou' droit+=droit)+)?
		((sialors+=SiAlors (sialors+=SiAlors)*)?
		| ('expression' expression+=Expression (expression+=Expression)*)?)*
		 
	;

Variable returns Variable:
	'Variable'
	'{'
		'type' type=EString
		'nom' nom=EString
		'valeur' valeur=EString
	'}';

SiAlors returns SiAlors:
	'SiAlors'
	'{'
		'condition' condition=Condition
		('expression' '{' expression+=Expression ( "," expression+=Expression)* '}' )?
		('sialors' '{' sialors+=SiAlors ( "," sialors+=SiAlors)* '}' )?
	'}';

droit returns droit:
	'droit'
	'{'
		'parties' parties=EString
	'}';

Condition returns Condition:
	'Condition'
	'{'
		'condition' condition=EString
	'}';

ActiveDesactive returns ActiveDesactive:
	'ActiveDesactive'
	'{'
		'action' action=EString
		'nom_clause_ou_contract' nom_clause_ou_contract=EString
	'}';

DateChange returns DateChange:
	'DateChange'
	'{'
		'var_a_change' var_a_change=EString
		'decalage' decalage=EInt
		'unite' unite=EString
		('date_base' date_base=EString)?
	'}';

NumChange returns NumChange:
	'NumChange'
	'{'
		'var_a_change' var_a_change=EString
		'decalage' decalage=EInt
	'}';

EInt returns ecore::EInt:
	'-'? INT;
